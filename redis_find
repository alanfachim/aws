public void scanKeys() {

        String pattern = "itemCache*ID1*";

        Iterable<byte[]> byters = redisTemplate.execute(new RedisCallback<Iterable<byte[]>>() {

            @Override
            public Iterable<byte[]> doInRedis(RedisConnection connection) throws DataAccessException {

                List<byte[]> binaryKeys = new ArrayList<byte[]>();

                Cursor<byte[]> cursor = connection.scan( ScanOptions.scanOptions().count(1).match(pattern).build());
                while (cursor.hasNext()) {
                    binaryKeys.add(cursor.next());
                }
                cursor.close();
                return binaryKeys;
            }
        });

        for (byte[] byteArr : byters) {
            System.out.println(new String(byteArr));
        }

    }
    
    @Bean
    public RedisTemplate<String, String> redisTemplate(RedisConnectionFactory connectionFactory) {
        RedisTemplate<String, String> template = new RedisTemplate<>();
        template.setConnectionFactory(connectionFactory);
        // Add some specific configuration here. Key serializers, etc.
        return template;
    }
